{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../src/Channel.svelte","../../src/TwitchPoll.svelte","../../src/FocusedMatch.svelte","../../src/Match.svelte","../../src/Bracket.svelte","../../src/DataInput.svelte","../../src/App.svelte","../../src/main.js"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nlet src_url_equal_anchor;\nfunction src_url_equal(element_src, url) {\n    if (!src_url_equal_anchor) {\n        src_url_equal_anchor = document.createElement('a');\n    }\n    src_url_equal_anchor.href = url;\n    return element_src === src_url_equal_anchor.href;\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\n}\nfunction get_all_dirty_from_scope($$scope) {\n    if ($$scope.ctx.length > 32) {\n        const dirty = [];\n        const length = $$scope.ctx.length / 32;\n        for (let i = 0; i < length; i++) {\n            dirty[i] = -1;\n        }\n        return dirty;\n    }\n    return -1;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\n// at the end of hydration without touching the remaining nodes.\nlet is_hydrating = false;\nfunction start_hydrating() {\n    is_hydrating = true;\n}\nfunction end_hydrating() {\n    is_hydrating = false;\n}\nfunction upper_bound(low, high, key, value) {\n    // Return first index of value larger than input value in the range [low, high)\n    while (low < high) {\n        const mid = low + ((high - low) >> 1);\n        if (key(mid) <= value) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nfunction init_hydrate(target) {\n    if (target.hydrate_init)\n        return;\n    target.hydrate_init = true;\n    // We know that all children have claim_order values since the unclaimed have been detached if target is not <head>\n    let children = target.childNodes;\n    // If target is <head>, there may be children without claim_order\n    if (target.nodeName === 'HEAD') {\n        const myChildren = [];\n        for (let i = 0; i < children.length; i++) {\n            const node = children[i];\n            if (node.claim_order !== undefined) {\n                myChildren.push(node);\n            }\n        }\n        children = myChildren;\n    }\n    /*\n    * Reorder claimed children optimally.\n    * We can reorder claimed children optimally by finding the longest subsequence of\n    * nodes that are already claimed in order and only moving the rest. The longest\n    * subsequence subsequence of nodes that are claimed in order can be found by\n    * computing the longest increasing subsequence of .claim_order values.\n    *\n    * This algorithm is optimal in generating the least amount of reorder operations\n    * possible.\n    *\n    * Proof:\n    * We know that, given a set of reordering operations, the nodes that do not move\n    * always form an increasing subsequence, since they do not move among each other\n    * meaning that they must be already ordered among each other. Thus, the maximal\n    * set of nodes that do not move form a longest increasing subsequence.\n    */\n    // Compute longest increasing subsequence\n    // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\n    const m = new Int32Array(children.length + 1);\n    // Predecessor indices + 1\n    const p = new Int32Array(children.length);\n    m[0] = -1;\n    let longest = 0;\n    for (let i = 0; i < children.length; i++) {\n        const current = children[i].claim_order;\n        // Find the largest subsequence length such that it ends in a value less than our current value\n        // upper_bound returns first greater value, so we subtract one\n        // with fast path for when we are on the current longest subsequence\n        const seqLen = ((longest > 0 && children[m[longest]].claim_order <= current) ? longest + 1 : upper_bound(1, longest, idx => children[m[idx]].claim_order, current)) - 1;\n        p[i] = m[seqLen] + 1;\n        const newLen = seqLen + 1;\n        // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\n        m[newLen] = i;\n        longest = Math.max(newLen, longest);\n    }\n    // The longest increasing subsequence of nodes (initially reversed)\n    const lis = [];\n    // The rest of the nodes, nodes that will be moved\n    const toMove = [];\n    let last = children.length - 1;\n    for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n        lis.push(children[cur - 1]);\n        for (; last >= cur; last--) {\n            toMove.push(children[last]);\n        }\n        last--;\n    }\n    for (; last >= 0; last--) {\n        toMove.push(children[last]);\n    }\n    lis.reverse();\n    // We sort the nodes being moved to guarantee that their insertion order matches the claim order\n    toMove.sort((a, b) => a.claim_order - b.claim_order);\n    // Finally, we move the nodes\n    for (let i = 0, j = 0; i < toMove.length; i++) {\n        while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {\n            j++;\n        }\n        const anchor = j < lis.length ? lis[j] : null;\n        target.insertBefore(toMove[i], anchor);\n    }\n}\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction append_styles(target, style_sheet_id, styles) {\n    const append_styles_to = get_root_for_style(target);\n    if (!append_styles_to.getElementById(style_sheet_id)) {\n        const style = element('style');\n        style.id = style_sheet_id;\n        style.textContent = styles;\n        append_stylesheet(append_styles_to, style);\n    }\n}\nfunction get_root_for_style(node) {\n    if (!node)\n        return document;\n    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n    if (root && root.host) {\n        return root;\n    }\n    return node.ownerDocument;\n}\nfunction append_empty_stylesheet(node) {\n    const style_element = element('style');\n    append_stylesheet(get_root_for_style(node), style_element);\n    return style_element.sheet;\n}\nfunction append_stylesheet(node, style) {\n    append(node.head || node, style);\n    return style.sheet;\n}\nfunction append_hydration(target, node) {\n    if (is_hydrating) {\n        init_hydrate(target);\n        if ((target.actual_end_child === undefined) || ((target.actual_end_child !== null) && (target.actual_end_child.parentNode !== target))) {\n            target.actual_end_child = target.firstChild;\n        }\n        // Skip nodes of undefined ordering\n        while ((target.actual_end_child !== null) && (target.actual_end_child.claim_order === undefined)) {\n            target.actual_end_child = target.actual_end_child.nextSibling;\n        }\n        if (node !== target.actual_end_child) {\n            // We only insert if the ordering of this node should be modified or the parent node is not target\n            if (node.claim_order !== undefined || node.parentNode !== target) {\n                target.insertBefore(node, target.actual_end_child);\n            }\n        }\n        else {\n            target.actual_end_child = node.nextSibling;\n        }\n    }\n    else if (node.parentNode !== target || node.nextSibling !== null) {\n        target.appendChild(node);\n    }\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction insert_hydration(target, node, anchor) {\n    if (is_hydrating && !anchor) {\n        append_hydration(target, node);\n    }\n    else if (node.parentNode !== target || node.nextSibling != anchor) {\n        target.insertBefore(node, anchor || null);\n    }\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction trusted(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.isTrusted)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction init_claim_info(nodes) {\n    if (nodes.claim_info === undefined) {\n        nodes.claim_info = { last_index: 0, total_claimed: 0 };\n    }\n}\nfunction claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {\n    // Try to find nodes in an order such that we lengthen the longest increasing subsequence\n    init_claim_info(nodes);\n    const resultNode = (() => {\n        // We first try to find an element after the previous one\n        for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                return node;\n            }\n        }\n        // Otherwise, we try to find one before\n        // We iterate in reverse so that we don't go too far back\n        for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                else if (replacement === undefined) {\n                    // Since we spliced before the last_index, we decrease it\n                    nodes.claim_info.last_index--;\n                }\n                return node;\n            }\n        }\n        // If we can't find any matching node, we create a new one\n        return createNode();\n    })();\n    resultNode.claim_order = nodes.claim_info.total_claimed;\n    nodes.claim_info.total_claimed += 1;\n    return resultNode;\n}\nfunction claim_element_base(nodes, name, attributes, create_element) {\n    return claim_node(nodes, (node) => node.nodeName === name, (node) => {\n        const remove = [];\n        for (let j = 0; j < node.attributes.length; j++) {\n            const attribute = node.attributes[j];\n            if (!attributes[attribute.name]) {\n                remove.push(attribute.name);\n            }\n        }\n        remove.forEach(v => node.removeAttribute(v));\n        return undefined;\n    }, () => create_element(name));\n}\nfunction claim_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, element);\n}\nfunction claim_svg_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, svg_element);\n}\nfunction claim_text(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 3, (node) => {\n        const dataStr = '' + data;\n        if (node.data.startsWith(dataStr)) {\n            if (node.data.length !== dataStr.length) {\n                return node.splitText(dataStr.length);\n            }\n        }\n        else {\n            node.data = dataStr;\n        }\n    }, () => text(data), true // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements\n    );\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction find_comment(nodes, text, start) {\n    for (let i = start; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {\n            return i;\n        }\n    }\n    return nodes.length;\n}\nfunction claim_html_tag(nodes, is_svg) {\n    // find html opening tag\n    const start_index = find_comment(nodes, 'HTML_TAG_START', 0);\n    const end_index = find_comment(nodes, 'HTML_TAG_END', start_index);\n    if (start_index === end_index) {\n        return new HtmlTagHydration(undefined, is_svg);\n    }\n    init_claim_info(nodes);\n    const html_tag_nodes = nodes.splice(start_index, end_index - start_index + 1);\n    detach(html_tag_nodes[0]);\n    detach(html_tag_nodes[html_tag_nodes.length - 1]);\n    const claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);\n    for (const n of claimed_nodes) {\n        n.claim_order = nodes.claim_info.total_claimed;\n        nodes.claim_info.total_claimed += 1;\n    }\n    return new HtmlTagHydration(claimed_nodes, is_svg);\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    if (value === null) {\n        node.style.removeProperty(key);\n    }\n    else {\n        node.style.setProperty(key, value, important ? 'important' : '');\n    }\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n    select.selectedIndex = -1; // no option should be selected\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, bubbles, cancelable, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor(is_svg = false) {\n        this.is_svg = false;\n        this.is_svg = is_svg;\n        this.e = this.n = null;\n    }\n    c(html) {\n        this.h(html);\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            if (this.is_svg)\n                this.e = svg_element(target.nodeName);\n            else\n                this.e = element(target.nodeName);\n            this.t = target;\n            this.c(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nclass HtmlTagHydration extends HtmlTag {\n    constructor(claimed_nodes, is_svg = false) {\n        super(is_svg);\n        this.e = this.n = null;\n        this.l = claimed_nodes;\n    }\n    c(html) {\n        if (this.l) {\n            this.n = this.l;\n        }\n        else {\n            super.c(html);\n        }\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert_hydration(this.t, this.n[i], anchor);\n        }\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\n\n// we need to store the information for multiple documents because a Svelte application could also contain iframes\n// https://github.com/sveltejs/svelte/issues/3624\nconst managed_styles = new Map();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_style_information(doc, node) {\n    const info = { stylesheet: append_empty_stylesheet(node), rules: {} };\n    managed_styles.set(doc, info);\n    return info;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = get_root_for_style(node);\n    const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);\n    if (!rules[name]) {\n        rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        managed_styles.forEach(info => {\n            const { ownerNode } = info.stylesheet;\n            // there is no ownerNode if it runs on jsdom.\n            if (ownerNode)\n                detach(ownerNode);\n        });\n        managed_styles.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail, { cancelable = false } = {}) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail, { cancelable });\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n            return !event.defaultPrevented;\n        }\n        return true;\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n    return context;\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\nfunction getAllContexts() {\n    return get_current_component().$$.context;\n}\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        // @ts-ignore\n        callbacks.slice().forEach(fn => fn.call(this, event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\n// flush() calls callbacks in this order:\n// 1. All beforeUpdate callbacks, in order: parents before children\n// 2. All bind:this callbacks, in reverse order: children before parents.\n// 3. All afterUpdate callbacks, in order: parents before children. EXCEPT\n//    for afterUpdates called during the initial onMount, which are called in\n//    reverse order: children before parents.\n// Since callbacks might update component values, which could trigger another\n// call to flush(), the following steps guard against this:\n// 1. During beforeUpdate, any updated components will be added to the\n//    dirty_components array and will cause a reentrant call to flush(). Because\n//    the flush index is kept outside the function, the reentrant call will pick\n//    up where the earlier call left off and go through all dirty components. The\n//    current_component value is saved and restored so that the reentrant call will\n//    not interfere with the \"parent\" flush() call.\n// 2. bind:this callbacks cannot trigger new flush() calls.\n// 3. During afterUpdate, any updated components will NOT have their afterUpdate\n//    callback called a second time; the seen_callbacks set, outside the flush()\n//    function, guarantees this behavior.\nconst seen_callbacks = new Set();\nlet flushidx = 0; // Do *not* move this inside the flush() function\nfunction flush() {\n    const saved_component = current_component;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        while (flushidx < dirty_components.length) {\n            const component = dirty_components[flushidx];\n            flushidx++;\n            set_current_component(component);\n            update(component.$$);\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        flushidx = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    seen_callbacks.clear();\n    set_current_component(saved_component);\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n    else if (callback) {\n        callback();\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            started = true;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = (program.b - t);\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n    const child_ctx = ctx.slice();\n    const { resolved } = info;\n    if (info.current === info.then) {\n        child_ctx[info.value] = resolved;\n    }\n    if (info.current === info.catch) {\n        child_ctx[info.error] = resolved;\n    }\n    info.block.p(child_ctx, dirty);\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\n/** regex of all html void element names */\nconst void_element_names = /^(?:area|base|br|col|command|embed|hr|img|input|keygen|link|meta|param|source|track|wbr)$/;\nfunction is_void(name) {\n    return void_element_names.test(name) || name.toLowerCase() === '!doctype';\n}\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, attrs_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (attrs_to_add) {\n        const classes_to_add = attrs_to_add.classes;\n        const styles_to_add = attrs_to_add.styles;\n        if (classes_to_add) {\n            if (attributes.class == null) {\n                attributes.class = classes_to_add;\n            }\n            else {\n                attributes.class += ' ' + classes_to_add;\n            }\n        }\n        if (styles_to_add) {\n            if (attributes.style == null) {\n                attributes.style = style_object_to_string(styles_to_add);\n            }\n            else {\n                attributes.style = style_object_to_string(merge_ssr_styles(attributes.style, styles_to_add));\n            }\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${value}\"`;\n        }\n    });\n    return str;\n}\nfunction merge_ssr_styles(style_attribute, style_directive) {\n    const style_object = {};\n    for (const individual_style of style_attribute.split(';')) {\n        const colon_index = individual_style.indexOf(':');\n        const name = individual_style.slice(0, colon_index).trim();\n        const value = individual_style.slice(colon_index + 1).trim();\n        if (!name)\n            continue;\n        style_object[name] = value;\n    }\n    for (const name in style_directive) {\n        const value = style_directive[name];\n        if (value) {\n            style_object[name] = value;\n        }\n        else {\n            delete style_object[name];\n        }\n    }\n    return style_object;\n}\nconst ATTR_REGEX = /[&\"]/g;\nconst CONTENT_REGEX = /[&<]/g;\n/**\n * Note: this method is performance sensitive and has been optimized\n * https://github.com/sveltejs/svelte/pull/5701\n */\nfunction escape(value, is_attr = false) {\n    const str = String(value);\n    const pattern = is_attr ? ATTR_REGEX : CONTENT_REGEX;\n    pattern.lastIndex = 0;\n    let escaped = '';\n    let last = 0;\n    while (pattern.test(str)) {\n        const i = pattern.lastIndex - 1;\n        const ch = str[i];\n        escaped += str.substring(last, i) + (ch === '&' ? '&amp;' : (ch === '\"' ? '&quot;' : '&lt;'));\n        last = i + 1;\n    }\n    return escaped + str.substring(last);\n}\nfunction escape_attribute_value(value) {\n    // keep booleans, null, and undefined for the sake of `spread`\n    const should_escape = typeof value === 'string' || (value && typeof value === 'object');\n    return should_escape ? escape(value, true) : value;\n}\nfunction escape_object(obj) {\n    const result = {};\n    for (const key in obj) {\n        result[key] = escape_attribute_value(obj[key]);\n    }\n    return result;\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(context || (parent_component ? parent_component.$$.context : [])),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    const assignment = (boolean && value === true) ? '' : `=\"${escape(value, true)}\"`;\n    return ` ${name}${assignment}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\nfunction style_object_to_string(style_object) {\n    return Object.keys(style_object)\n        .filter(key => style_object[key])\n        .map(key => `${key}: ${style_object[key]};`)\n        .join(' ');\n}\nfunction add_styles(style_object) {\n    const styles = style_object_to_string(style_object);\n    return styles ? ` style=\"${styles}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = on_mount.map(run).filter(is_function);\n            if (on_destroy) {\n                on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false,\n        root: options.target || parent_component.$$.root\n    };\n    append_styles && append_styles($$.root);\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            start_hydrating();\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        end_hydrating();\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.50.1' }, detail), { bubbles: true }));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction append_hydration_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append_hydration(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction insert_hydration_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert_hydration(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\nfunction validate_dynamic_element(tag) {\n    const is_string = typeof tag === 'string';\n    if (tag && !is_string) {\n        throw new Error('<svelte:element> expects \"this\" attribute to be a string.');\n    }\n}\nfunction validate_void_dynamic_element(tag) {\n    if (tag && is_void(tag)) {\n        throw new Error(`<svelte:element this=\"${tag}\"> is self-closing and cannot have content.`);\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to separate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, HtmlTagHydration, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_styles, add_transform, afterUpdate, append, append_dev, append_empty_stylesheet, append_hydration, append_hydration_dev, append_styles, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_html_tag, claim_space, claim_svg_element, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, end_hydrating, escape, escape_attribute_value, escape_object, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getAllContexts, getContext, get_all_dirty_from_scope, get_binding_group_value, get_current_component, get_custom_elements_slots, get_root_for_style, get_slot_changes, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, identity, init, insert, insert_dev, insert_hydration, insert_hydration_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, is_void, listen, listen_dev, loop, loop_guard, merge_ssr_styles, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, src_url_equal, start_hydrating, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, trusted, update_await_block_branch, update_keyed_each, update_slot, update_slot_base, validate_component, validate_dynamic_element, validate_each_argument, validate_each_keys, validate_slots, validate_store, validate_void_dynamic_element, xlink_attr };\n","<script>\r\n    export let controller;\r\n    export let channels = [];\r\n    export let matchID;\r\n    export let matches;\r\n    export let selector;\r\n\r\n    export let focused = false;\r\n\r\n    let channel, winner, eliminated;\r\n\r\n    $: {\r\n        if (matches[matchID][selector] === null) {\r\n            channel = {\r\n                name: \"TBD\",\r\n            };\r\n        } else {\r\n            if (channels[matches[matchID][selector]]) {\r\n                channel = channels[matches[matchID][selector]];\r\n            } else {\r\n                channel = {\r\n                    name: \"BYE\",\r\n                };\r\n            }\r\n        }\r\n    }\r\n\r\n    $: winner = matches[matchID][\"winner\"] === selector;\r\n    $: eliminated = !winner && matches[matchID][\"winner\"] !== undefined;\r\n\r\n    function setWinner() {\r\n        if (matches[matchID][0] === null || matches[matchID][1] === null)\r\n            return;\r\n\r\n        let changesConfirmed = controller.reset(matchID);\r\n        if (!changesConfirmed) return;\r\n\r\n        if (selector === matches[matchID][\"winner\"]) {\r\n            matches[matchID][\"winner\"] = undefined;\r\n            return;\r\n        }\r\n\r\n        matches[matchID][\"winner\"] = selector;\r\n\r\n        if (matchID === 0) return;\r\n\r\n        let isFirstChild = matchID % 2;\r\n        let parent = isFirstChild ? matchID - 1 : matchID - 2;\r\n        parent = parent / 2;\r\n        matches[parent][isFirstChild ? 0 : 1] = matches[matchID][selector];\r\n        matches[parent][\"winner\"] = undefined;\r\n    }\r\n</script>\r\n\r\n{#if focused}\r\n    <channel class:winner class:focused>\r\n        <img\r\n            class=\"interactive\"\r\n            class:eliminated\r\n            on:click={setWinner}\r\n            alt=\"{channel['name']}}\"\r\n            src={channel[\"vidID\"]\r\n                ? `https://i3.ytimg.com/vi/${channel[\"vidID\"]}/maxresdefault.jpg`\r\n                : \"ytempty.svg\"}\r\n        />\r\n\r\n        <name class=\"interactive\" on:click={setWinner}>\r\n            {channel[\"name\"]}\r\n        </name><a\r\n            href={`https://www.youtube.com/watch?v=${channel[\"vidID\"]}`}\r\n            target=\"_blank\"\r\n        >\r\n            <img class=\"logo\" alt=\"Youtube logo\" src=\"yt.svg\" />\r\n        </a>\r\n    </channel>\r\n{:else}\r\n    <channel class:winner>\r\n        <img\r\n            class:eliminated\r\n            alt=\"{channel['name']}}\"\r\n            src={channel[\"vidID\"]\r\n                ? `https://i3.ytimg.com/vi/${channel[\"vidID\"]}/maxresdefault.jpg`\r\n                : \"ytempty.svg\"}\r\n        />\r\n        <name>\r\n            {channel[\"name\"]}\r\n        </name>\r\n    </channel>\r\n{/if}\r\n\r\n<style>\r\n    channel {\r\n        display: block;\r\n        width: 12rem;\r\n\r\n        text-align: center;\r\n\r\n        border: 0.2rem solid transparent;\r\n        border-radius: 0.3rem;\r\n\r\n        background-color: var(--channel-color, var(--color-grey-medium));\r\n        margin: 0.75rem 0;\r\n    }\r\n\r\n    channel:hover {\r\n        --channel-color: var(--color-grey-light);\r\n    }\r\n\r\n    channel.winner {\r\n        border-color: var(--color-highlight);\r\n    }\r\n\r\n    img {\r\n        width: 100%;\r\n        border-radius: 0.2rem;\r\n    }\r\n\r\n    img.eliminated {\r\n        filter: grayscale(100%);\r\n    }\r\n\r\n    name {\r\n        display: inline;\r\n        color: white;\r\n        font-size: 1.5rem;\r\n        vertical-align: middle;\r\n        font-family: Anton;\r\n    }\r\n\r\n    channel.focused {\r\n        width: 18rem;\r\n    }\r\n\r\n    .focused name {\r\n        font-size: 2rem;\r\n    }\r\n\r\n    channel .logo {\r\n        display: inline;\r\n        height: 2rem;\r\n        width: auto;\r\n        vertical-align: middle;\r\n        margin: 0 0 0 0.5rem;\r\n    }\r\n</style>\r\n","<script>\r\n    export let controller;\r\n    export let matchID;\r\n    export let matches;\r\n\r\n    let pollStatus = false;\r\n\r\n    let lastMatchID;\r\n    $: {\r\n        if (lastMatchID !== matchID) {\r\n            endPoll();\r\n        }\r\n    }\r\n\r\n    let ratio;\r\n    $: ratio =\r\n        (100 * matches[matchID][\"poll\"][\"result\"][0]) /\r\n        (matches[matchID][\"poll\"][\"result\"][0] +\r\n            matches[matchID][\"poll\"][\"result\"][1]);\r\n\r\n    let twitch;\r\n    let lastChannel;\r\n\r\n    $: connectTwitch(controller[\"settings\"][\"twitchChannel\"][\"value\"]);\r\n\r\n    function connectTwitch(twitchChannel) {\r\n        if (lastChannel === twitchChannel) return;\r\n        if (twitch) {\r\n            console.log(twitch);\r\n            twitch.disconnect();\r\n        }\r\n\r\n        console.log(twitchChannel);\r\n\r\n        twitch = new window.tmi.Client({\r\n            channels: [twitchChannel.toLowerCase()],\r\n        });\r\n        twitch.connect().then(() => console.log(\"CONNECTED\"));\r\n\r\n        let handler = async (channel, tags, message, self) => {\r\n            if (!pollStatus) return;\r\n\r\n            if (\r\n                matches[matchID][\"poll\"][\"participants\"].includes(\r\n                    tags[\"user-id\"]\r\n                )\r\n            )\r\n                return;\r\n\r\n            if (message === \"1\") {\r\n                matches[matchID][\"poll\"][\"result\"][0]++;\r\n            } else if (message === \"2\") {\r\n                matches[matchID][\"poll\"][\"result\"][1]++;\r\n            }\r\n            matches[matchID][\"poll\"][\"participants\"].push(tags[\"user-id\"]);\r\n            console.log(message, matches[matchID][\"poll\"][\"participants\"]);\r\n        };\r\n        twitch.on(\"message\", handler);\r\n        lastChannel = twitchChannel;\r\n    }\r\n\r\n    function startPoll() {\r\n        resetPoll();\r\n        pollStatus = true;\r\n    }\r\n\r\n    function endPoll() {\r\n        pollStatus = false;\r\n    }\r\n\r\n    function resetPoll() {\r\n        matches[matchID][\"poll\"][\"result\"] = [0, 0];\r\n        matches[matchID][\"poll\"][\"participants\"] = [];\r\n    }\r\n</script>\r\n\r\n<pollFrame>\r\n    <voteCommands>\r\n        <voteCommand class=\"channel1\">1</voteCommand>\r\n        <span class=\"vs\">VS</span>\r\n        <voteCommand class=\"channel2\">2</voteCommand>\r\n    </voteCommands>\r\n    <results>\r\n        <votes class=\"channel1\">{matches[matchID][\"poll\"][\"result\"][0]}</votes>\r\n        <span>VOTES</span>\r\n        <votes class=\"channel2\">{matches[matchID][\"poll\"][\"result\"][1]}</votes>\r\n    </results>\r\n    <pollBar>\r\n        <resultBar style=\"width:{Number.isNaN(ratio) ? 50 : ratio}%\" />\r\n    </pollBar>\r\n    <pollButtons>\r\n        <pollButton on:click={startPoll}>start</pollButton>\r\n        <pollStatus class:active={pollStatus}>\r\n            <img alt=\"twitch logo\" src=\"twitch.svg\" />\r\n        </pollStatus>\r\n        <pollButton on:click={endPoll}>end</pollButton>\r\n    </pollButtons>\r\n</pollFrame>\r\n\r\n<style>\r\n    pollFrame {\r\n        display: flex;\r\n        justify-content: space-between;\r\n        align-items: center;\r\n        flex-direction: column;\r\n        height: 100%;\r\n        width: 19rem;\r\n        margin: 0rem 1.5rem;\r\n    }\r\n    voteCommands,\r\n    results {\r\n        width: 100%;\r\n        display: flex;\r\n        flex-direction: row;\r\n        justify-content: space-between;\r\n        align-items: center;\r\n    }\r\n    voteCommand {\r\n        font-size: 5.5rem;\r\n        padding: 0 1rem;\r\n    }\r\n    votes {\r\n        font-size: 1.5rem;\r\n        padding: 0 1rem;\r\n    }\r\n\r\n    span.vs {\r\n        font-size: 2rem;\r\n    }\r\n\r\n    pollBar {\r\n        display: block;\r\n        width: 100%;\r\n        height: 1rem;\r\n        background-color: var(--color-blue);\r\n        border-radius: 0.3rem;\r\n    }\r\n\r\n    resultBar {\r\n        display: block;\r\n        height: 100%;\r\n        width: 50%;\r\n        background-color: var(--color-orange);\r\n        border-radius: 0.3rem 0 0 0.3rem;\r\n    }\r\n\r\n    pollButtons {\r\n        display: flex;\r\n        margin: 0.5rem 0 0 0;\r\n    }\r\n\r\n    pollButton,\r\n    pollStatus {\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        margin: 0 0.5rem;\r\n        border-radius: 0.3rem;\r\n        height: 2rem;\r\n    }\r\n\r\n    pollButton {\r\n        width: 4rem;\r\n        background-color: var(--color-grey-medium);\r\n        font-size: 1.1rem;\r\n        cursor: pointer;\r\n    }\r\n\r\n    pollButton:hover {\r\n        background-color: var(--color-grey-light);\r\n    }\r\n\r\n    pollStatus {\r\n        width: 2rem;\r\n        background-color: var(--color-grey-medium);\r\n    }\r\n\r\n    pollStatus img {\r\n        height: 60%;\r\n        width: 60%;\r\n        filter: grayscale(1);\r\n    }\r\n\r\n    pollStatus.active img {\r\n        filter: none;\r\n    }\r\n</style>\r\n","<script>\r\n    import Channel from \"./Channel.svelte\";\r\n    import TwitchPoll from \"./TwitchPoll.svelte\";\r\n\r\n    export let matchID;\r\n    export let controller;\r\n\r\n    export let channels;\r\n    export let matches;\r\n</script>\r\n\r\n<match>\r\n    {#if matches}\r\n        <nav\r\n            class=\"interactive\"\r\n            on:click={() => controller.focusMatch(matchID + 1)}\r\n        >\r\n            ←\r\n        </nav>\r\n        <Channel\r\n            focused\r\n            {controller}\r\n            {channels}\r\n            {matchID}\r\n            bind:matches\r\n            selector={1}\r\n        />\r\n        <TwitchPoll bind:controller {matchID} bind:matches />\r\n        <Channel\r\n            focused\r\n            {controller}\r\n            {channels}\r\n            {matchID}\r\n            bind:matches\r\n            selector={0}\r\n        />\r\n        <nav\r\n            class=\"interactive\"\r\n            on:click={() => controller.focusMatch(matchID - 1)}\r\n        >\r\n            →\r\n        </nav>\r\n    {/if}\r\n</match>\r\n\r\n<style>\r\n    match {\r\n        height: fit-content;\r\n        text-align: center;\r\n        color: white;\r\n\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n\r\n        margin: 0.5rem 0 1.5rem 0;\r\n    }\r\n\r\n    nav {\r\n        padding: 0.2rem 1rem;\r\n        border-radius: 0.3rem;\r\n        margin: 2rem;\r\n        font-size: 1.5rem;\r\n        background-color: var(--color-grey-medium);\r\n    }\r\n\r\n    nav:hover {\r\n        background-color: var(--color-grey-light);\r\n    }\r\n</style>\r\n","<script>\r\n    import Channel from \"./Channel.svelte\";\r\n\r\n    export let controller;\r\n    export let channels = null;\r\n    export let matches;\r\n    export let matchID;\r\n    export let orientation;\r\n    export let leaf = false;\r\n</script>\r\n\r\n<match on:click={() => controller.focusMatch(matchID)}>\r\n    {#if orientation === \"right\"}\r\n        <bracketLine class=\"right\" />\r\n        <channels class:leaf class=\"right\">\r\n            <Channel\r\n                bind:controller\r\n                {channels}\r\n                {matchID}\r\n                bind:matches\r\n                selector={1}\r\n            />\r\n            <Channel\r\n                bind:controller\r\n                {channels}\r\n                {matchID}\r\n                bind:matches\r\n                selector={0}\r\n            />\r\n        </channels>\r\n        {#if !leaf}\r\n            <lines>\r\n                <verticalLine />\r\n                <verticalLine />\r\n            </lines>\r\n        {/if}\r\n    {:else if orientation === \"left\"}\r\n        {#if !leaf}\r\n            <lines>\r\n                <verticalLine />\r\n                <verticalLine />\r\n            </lines>\r\n        {/if}\r\n        <channels class:leaf class=\"left\">\r\n            <Channel\r\n                bind:controller\r\n                {channels}\r\n                {matchID}\r\n                bind:matches\r\n                selector={1}\r\n            />\r\n            <Channel\r\n                bind:controller\r\n                {channels}\r\n                {matchID}\r\n                bind:matches\r\n                selector={0}\r\n            />\r\n        </channels>\r\n        <bracketLine class=\"left\" />\r\n    {:else}\r\n        <finalMatch>\r\n            <finalChannel>\r\n                <verticalLine class=\"final\" />\r\n                <Channel\r\n                    bind:controller\r\n                    {channels}\r\n                    {matchID}\r\n                    bind:matches\r\n                    selector={1}\r\n                />\r\n                <verticalLine class=\"final placeholder\" />\r\n            </finalChannel>\r\n            <finalChannel>\r\n                <verticalLine class=\"final placeholder\" />\r\n                <Channel\r\n                    bind:controller\r\n                    {channels}\r\n                    {matchID}\r\n                    bind:matches\r\n                    selector={0}\r\n                />\r\n                <verticalLine class=\"final\" />\r\n            </finalChannel>\r\n        </finalMatch>\r\n    {/if}\r\n</match>\r\n\r\n<style>\r\n    match {\r\n        height: 100%;\r\n        display: flex;\r\n        justify-content: space-around;\r\n        align-items: center;\r\n\r\n        --bracket-line-width: 0.25rem;\r\n        --bracket-line-color: var(--color-grey-medium);\r\n        --channel-color: var(--color-grey-medium);\r\n    }\r\n\r\n    match:hover {\r\n        --bracket-line-color: var(--color-grey-light);\r\n        --channel-color: var(--color-grey-light);\r\n    }\r\n\r\n    channels,\r\n    lines {\r\n        height: 100%;\r\n\r\n        display: inline-flex;\r\n        justify-content: space-around;\r\n        flex-direction: column;\r\n    }\r\n\r\n    channels.leaf.right {\r\n        margin-right: 2rem;\r\n    }\r\n\r\n    channels.leaf.left {\r\n        margin-left: 2rem;\r\n    }\r\n\r\n    finalMatch {\r\n        display: inline-flex;\r\n        justify-content: space-around;\r\n        flex-direction: column;\r\n    }\r\n\r\n    finalChannel {\r\n        height: 100%;\r\n\r\n        display: inline-flex;\r\n        justify-content: space-around;\r\n        align-items: center;\r\n        flex-direction: row;\r\n    }\r\n\r\n    bracketLine {\r\n        display: inline-block;\r\n        padding: 0;\r\n        margin: 0;\r\n\r\n        width: 2rem;\r\n        height: calc(50% - var(--bracket-line-width));\r\n\r\n        border: var(--bracket-line-width) solid var(--bracket-line-color);\r\n    }\r\n\r\n    bracketLine.left {\r\n        border-left: none;\r\n        border-radius: 0 0.3rem 0.3rem 0;\r\n    }\r\n    bracketLine.right {\r\n        border-right: none;\r\n        border-radius: 0.3rem 0 0 0.3rem;\r\n    }\r\n\r\n    verticalLine {\r\n        width: 2rem;\r\n        height: 0rem;\r\n        border-top: var(--bracket-line-width) solid var(--bracket-line-color);\r\n    }\r\n\r\n    verticalLine.final {\r\n        width: 2rem;\r\n    }\r\n    verticalLine.placeholder {\r\n        visibility: hidden;\r\n        width: 4rem;\r\n    }\r\n</style>\r\n","<script>\r\n    import Bracket from \"./Bracket.svelte\";\r\n    import Match from \"./Match.svelte\";\r\n\r\n    export let controller;\r\n    export let level = 0;\r\n    export let matchID = 0;\r\n\r\n    export let channels = null;\r\n    export let matches;\r\n    export let final = false;\r\n    export let orientation = \"left\";\r\n</script>\r\n\r\n<bracket class=\"interactive\">\r\n    {#if final}\r\n        <leftbracket>\r\n            <Bracket\r\n                bind:controller\r\n                orientation=\"left\"\r\n                level={level - 1}\r\n                {channels}\r\n                matchID={2 * matchID + 2}\r\n                bind:matches\r\n            />\r\n        </leftbracket>\r\n        <final>\r\n            <Match\r\n                bind:controller\r\n                orientation=\"final\"\r\n                {channels}\r\n                {matchID}\r\n                bind:matches\r\n            />\r\n        </final>\r\n        <rightbracket>\r\n            <Bracket\r\n                bind:controller\r\n                orientation=\"right\"\r\n                level={level - 1}\r\n                {channels}\r\n                matchID={2 * matchID + 1}\r\n                bind:matches\r\n            />\r\n        </rightbracket>\r\n    {:else if level !== 0}\r\n        {#if orientation === \"right\"}\r\n            <current>\r\n                <Match\r\n                    bind:controller\r\n                    {orientation}\r\n                    {channels}\r\n                    {matchID}\r\n                    bind:matches\r\n                />\r\n            </current>\r\n            <previous>\r\n                <Bracket\r\n                    bind:controller\r\n                    orientation=\"right\"\r\n                    level={level - 1}\r\n                    {channels}\r\n                    matchID={2 * matchID + 2}\r\n                    bind:matches\r\n                />\r\n\r\n                <Bracket\r\n                    bind:controller\r\n                    orientation=\"right\"\r\n                    level={level - 1}\r\n                    {channels}\r\n                    matchID={2 * matchID + 1}\r\n                    bind:matches\r\n                />\r\n            </previous>\r\n        {:else}\r\n            <previous>\r\n                <Bracket\r\n                    bind:controller\r\n                    level={level - 1}\r\n                    {channels}\r\n                    matchID={2 * matchID + 2}\r\n                    bind:matches\r\n                />\r\n\r\n                <Bracket\r\n                    bind:controller\r\n                    level={level - 1}\r\n                    {channels}\r\n                    matchID={2 * matchID + 1}\r\n                    bind:matches\r\n                />\r\n            </previous>\r\n            <current>\r\n                <Match\r\n                    bind:controller\r\n                    {orientation}\r\n                    {channels}\r\n                    {matchID}\r\n                    bind:matches\r\n                />\r\n            </current>\r\n        {/if}\r\n    {:else}\r\n        <current>\r\n            <Match\r\n                leaf\r\n                bind:controller\r\n                {orientation}\r\n                {channels}\r\n                {matchID}\r\n                bind:matches\r\n            />\r\n        </current>\r\n    {/if}\r\n</bracket>\r\n\r\n<style>\r\n    bracket {\r\n        width: 100%;\r\n        height: fit-content;\r\n        display: flex;\r\n        justify-content: center;\r\n    }\r\n</style>\r\n","<script>\r\n    export let channels;\r\n    export let controller;\r\n\r\n    let expanded = false;\r\n\r\n    let jsonString;\r\n    let settingsJsonString;\r\n    let textarea;\r\n    let settingsTextarea;\r\n\r\n    let templateURL;\r\n\r\n    $: {\r\n        templateURL = getTemplateURL(channels);\r\n    }\r\n\r\n    function getTemplateURL(cs) {\r\n        console.log(\"calc url\");\r\n        if (!cs) return;\r\n        let url = location.protocol + \"//\" + location.host + location.pathname;\r\n        url += \"?channels=\";\r\n        for (let i = 0; i < cs.length; i++) {\r\n            url += encodeURIComponent(cs[i][\"name\"]);\r\n            if (i < cs.length - 1) {\r\n                url += \",\";\r\n            }\r\n        }\r\n        url += \"&ids=\";\r\n        for (let i = 0; i < cs.length; i++) {\r\n            url += encodeURIComponent(cs[i][\"vidID\"]);\r\n            if (i < cs.length - 1) {\r\n                url += \",\";\r\n            }\r\n        }\r\n        return url;\r\n    }\r\n\r\n    $: jsonString = JSON.stringify(channels, null, 5);\r\n    $: settingsJsonString = JSON.stringify(controller[\"settings\"], null, 5);\r\n\r\n    function importJSON(area) {\r\n        channels = JSON.parse(area.value);\r\n    }\r\n\r\n    function addChannel() {\r\n        channels = [\r\n            ...channels,\r\n            {\r\n                name: \"\",\r\n                vidID: \"\",\r\n            },\r\n        ];\r\n\r\n        if (\r\n            Math.ceil(Math.log2(channels.length)) >\r\n            Math.ceil(Math.log2(channels.length - 1))\r\n        ) {\r\n            if (!controller.setUpBracket()) {\r\n                channels.splice(channels.length - 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    function removeChannel(i) {\r\n        let oldChannels = channels;\r\n        channels = [...channels.slice(0, i), ...channels.slice(i + 1)];\r\n        if (\r\n            Math.ceil(Math.log2(channels.length)) <\r\n            Math.ceil(Math.log2(channels.length + 1))\r\n        ) {\r\n            if (!controller.setUpBracket()) {\r\n                channels = oldChannels;\r\n            }\r\n        }\r\n    }\r\n</script>\r\n\r\n<toggleButton\r\n    class=\"interactive\"\r\n    on:click={(e) => {\r\n        expanded = !expanded;\r\n        if (expanded) {\r\n            e.target.innerHTML = \"▼ Settings\";\r\n        } else {\r\n            e.target.innerHTML = \"▶ Settings\";\r\n        }\r\n    }}>▶ Settings</toggleButton\r\n>\r\n<dataInput>\r\n    {#if expanded}\r\n        <dataLabel>Channels</dataLabel>\r\n        <section>\r\n            <formBlock>\r\n                {#if channels}\r\n                    {#each channels as { name, vidID }, i}\r\n                        <channel>\r\n                            <channelButton\r\n                                class=\"delete\"\r\n                                on:click={() => {\r\n                                    removeChannel(i);\r\n                                }}\r\n                            >\r\n                                ⌦\r\n                            </channelButton>\r\n                            <input\r\n                                type=\"text\"\r\n                                class=\"channel-name\"\r\n                                bind:value={name}\r\n                            />\r\n                            <input\r\n                                type=\"text\"\r\n                                class=\"video-id\"\r\n                                bind:value={vidID}\r\n                            />\r\n                        </channel>\r\n                    {/each}\r\n                {/if}\r\n                <channel>\r\n                    <channelButton class=\"add\" on:click={addChannel}\r\n                        >＋</channelButton\r\n                    >\r\n                </channel>\r\n            </formBlock>\r\n            <jsonBlock>\r\n                <textarea\r\n                    bind:this={textarea}\r\n                    class=\"json\"\r\n                    value={jsonString}\r\n                    on:input={() => {\r\n                        importJSON(textarea);\r\n                    }}\r\n                />\r\n            </jsonBlock>\r\n        </section>\r\n        <dataLabel>Settings</dataLabel>\r\n        <section>\r\n            <formBlock>\r\n                {#each Object.entries(controller[\"settings\"]) as [setting, data], i}\r\n                    <setting>\r\n                        <settingLabel>\r\n                            {data[\"name\"]}:\r\n                        </settingLabel>\r\n                        <input\r\n                            type=\"text\"\r\n                            class=\"channel-name\"\r\n                            value={data[\"value\"]}\r\n                            on:change={(e) => {\r\n                                data[\"value\"] = e.target.value;\r\n                            }}\r\n                        />\r\n                    </setting>\r\n                {/each}\r\n            </formBlock>\r\n            <jsonBlock>\r\n                <textarea\r\n                    bind:this={settingsTextarea}\r\n                    class=\"json\"\r\n                    value={settingsJsonString}\r\n                    on:input={() => {\r\n                        importJSON(settingsTextarea);\r\n                    }}\r\n                />\r\n            </jsonBlock>\r\n        </section>\r\n        <dataLabel>Template URL</dataLabel>\r\n        <section>\r\n            <jsonBlock>\r\n                <textarea class=\"json\" value={templateURL} />\r\n            </jsonBlock>\r\n        </section>\r\n    {/if}\r\n</dataInput>\r\n\r\n<style>\r\n    toggleButton {\r\n        width: fit-content;\r\n        color: var(--color-grey-light);\r\n        font-size: 1.5rem;\r\n        margin: 5rem 0.5rem 2rem 0;\r\n        text-decoration: underline;\r\n    }\r\n\r\n    dataInput {\r\n        width: 100%;\r\n    }\r\n\r\n    dataLabel {\r\n        color: white;\r\n        font-size: 1.5rem;\r\n        padding: 0.5rem;\r\n        margin-top: 1.5rem;\r\n    }\r\n\r\n    settingLabel {\r\n        font-family: sans-serif, Helvetica, Arial;\r\n        color: white;\r\n        font-size: 1rem;\r\n        margin-top: 1rem;\r\n    }\r\n\r\n    channelButton {\r\n        display: inline-block;\r\n        width: 2rem;\r\n        height: 2rem;\r\n        margin: 0.25rem;\r\n\r\n        border-radius: 0.3rem;\r\n\r\n        font-size: 1.3rem;\r\n        background-color: var(--color-grey-medium);\r\n        color: white;\r\n        text-align: center;\r\n        vertical-align: middle;\r\n\r\n        cursor: pointer;\r\n    }\r\n\r\n    input,\r\n    textarea {\r\n        font-family: sans-serif, Helvetica, Arial;\r\n        color: white;\r\n\r\n        vertical-align: middle;\r\n\r\n        margin: 0.2rem;\r\n        background-color: var(--color-grey-medium);\r\n\r\n        border: 0;\r\n        border-radius: 0.4rem;\r\n        resize: none;\r\n    }\r\n\r\n    input:focus-visible,\r\n    textarea:focus-visible {\r\n        outline: 0.1rem solid var(--color-highlight);\r\n    }\r\n\r\n    channel {\r\n        display: flex;\r\n        align-items: center;\r\n    }\r\n\r\n    input.channel-name {\r\n        font-weight: bold;\r\n    }\r\n\r\n    section {\r\n        display: flex;\r\n        margin-bottom: 1.5rem;\r\n    }\r\n\r\n    formBlock,\r\n    jsonBlock {\r\n        display: inline-block;\r\n        padding: 0.5rem;\r\n    }\r\n\r\n    formBlock {\r\n        width: fit-content;\r\n    }\r\n\r\n    jsonBlock {\r\n        min-height: 10rem;\r\n        flex-grow: 1;\r\n    }\r\n\r\n    .json {\r\n        width: 100%;\r\n        height: calc(100% - 2rem);\r\n    }\r\n</style>\r\n","<script>\r\n\timport { onMount } from \"svelte\";\r\n\timport FocusedMatch from \"./FocusedMatch.svelte\";\r\n\timport Bracket from \"./Bracket.svelte\";\r\n\timport DataInput from \"./DataInput.svelte\";\r\n\r\n\tconst getTBDMatch = () => {\r\n\t\treturn structuredClone({\r\n\t\t\t0: null,\r\n\t\t\t1: null,\r\n\t\t\twinner: undefined,\r\n\t\t\tpoll: {\r\n\t\t\t\tresult: [0, 0],\r\n\t\t\t\tparticipants: [],\r\n\t\t\t},\r\n\t\t});\r\n\t};\r\n\r\n\tlet channels = null;\r\n\r\n\tlet bracketLevels;\r\n\r\n\tlet matches = null;\r\n\r\n\t$: {\r\n\t\tif (matches) {\r\n\t\t\tlocalStorage.setItem(\"WITBYmatches\", JSON.stringify(matches));\r\n\t\t\tconsole.log(\"SAVED MATCHES\");\r\n\t\t}\r\n\t}\r\n\r\n\tlet focusedMatch;\r\n\r\n\tonMount(async () => {\r\n\t\tconst queryString = window.location.search;\r\n\t\tconst urlParams = new URLSearchParams(queryString);\r\n\t\tconsole.log();\r\n\r\n\t\tif (urlParams.has(\"channels\") && urlParams.has(\"ids\")) {\r\n\t\t\tlet urlChannels = [];\r\n\t\t\tlet urlChannelNames = urlParams.get(\"channels\").split(\",\");\r\n\t\t\tlet urlChannelIds = urlParams.get(\"ids\").split(\",\");\r\n\t\t\tfor (let i = 0; i < urlChannelNames.length; i++) {\r\n\t\t\t\turlChannels.push({\r\n\t\t\t\t\tname: urlChannelNames[i],\r\n\t\t\t\t\tvidID: urlChannelIds[i],\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tchannels = urlChannels;\r\n\t\t} else {\r\n\t\t\tconst data = await fetch(\"./channels.json\").then((res) =>\r\n\t\t\t\tres.json()\r\n\t\t\t);\r\n\t\t\tchannels = await data[\"channels\"];\r\n\t\t}\r\n\t\tconsole.log(channels);\r\n\r\n\t\tlet storageMatches = JSON.parse(localStorage.getItem(\"WITBYmatches\"));\r\n\r\n\t\tif (storageMatches && storageMatches.length === channels.length - 1) {\r\n\t\t\tmatches = storageMatches;\r\n\t\t\tbracketLevels = Math.ceil(Math.log2(channels.length));\r\n\t\t\tfocusedMatch = 2 ** bracketLevels - 2;\r\n\t\t\tconsole.log(matches);\r\n\t\t} else {\r\n\t\t\tcontroller.setUpBracket(true);\r\n\t\t}\r\n\t});\r\n\r\n\tlet controller = {\r\n\t\tsettings: {\r\n\t\t\ttwitchChannel: { value: \"stanz\", name: \"Twitch Channel\" },\r\n\t\t},\r\n\t\treset: (matchID) => {\r\n\t\t\tconsole.log(\"RESET\", matchID);\r\n\t\t\tlet userConfirm = false;\r\n\r\n\t\t\tlet parent = matchID;\r\n\r\n\t\t\twhile (parent !== 0) {\r\n\t\t\t\tlet selector = parent % 2 ? 0 : 1;\r\n\t\t\t\tparent = selector ? (parent - 2) / 2 : (parent - 1) / 2;\r\n\t\t\t\tif (!userConfirm && matches[parent][\"winner\"] !== undefined) {\r\n\t\t\t\t\tuserConfirm = confirm(\r\n\t\t\t\t\t\t\"You are about to reset the selected and all dependent matches. Proceed?\"\r\n\t\t\t\t\t);\r\n\t\t\t\t\tif (!userConfirm) {\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (userConfirm) {\r\n\t\t\t\t\tmatches[parent][selector] = null;\r\n\t\t\t\t\tmatches[parent][\"winner\"] = undefined;\r\n\t\t\t\t\tmatches[parent][\"poll\"] = {\r\n\t\t\t\t\t\tresult: [0, 0],\r\n\t\t\t\t\t\tparticipants: [],\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t},\r\n\t\tfocusMatch: (id) => {\r\n\t\t\tfocusedMatch = Math.min(Math.max(0, id), matches.length - 1);\r\n\t\t},\r\n\t\tsetUpBracket: (skipConfirm) => {\r\n\t\t\tlet confirmed =\r\n\t\t\t\tskipConfirm ||\r\n\t\t\t\tconfirm(\r\n\t\t\t\t\t\"Due to changed data a new bracket has to be calculated, which will reset the current bracket. Proceed?\"\r\n\t\t\t\t);\r\n\t\t\tif (!confirmed) return false;\r\n\r\n\t\t\tbracketLevels = Math.ceil(Math.log2(channels.length));\r\n\t\t\tfocusedMatch = 2 ** bracketLevels - 2;\r\n\t\t\tmatches = calculateMatches();\r\n\t\t\treturn true;\r\n\t\t},\r\n\t};\r\n\r\n\tfunction calculateMatches() {\r\n\t\t// https://stackoverflow.com/a/45572051\r\n\t\tvar participants = Array.from(\r\n\t\t\t{ length: channels.length },\r\n\t\t\t(v, k) => k + 1\r\n\t\t);\r\n\t\tlet bracket = getBracket(participants);\r\n\r\n\t\tlet matches = [];\r\n\r\n\t\tfor (let i = 0; i < 2 ** (bracketLevels - 1) - 1; i++) {\r\n\t\t\tmatches[i] = getTBDMatch();\r\n\t\t}\r\n\r\n\t\tfor (let i = 0; i < bracket.length; i++) {\r\n\t\t\tmatches[2 ** (bracketLevels - 1) - 1 + (bracket.length - 1 - i)] = {\r\n\t\t\t\t0: bracket[i][1] - 1,\r\n\t\t\t\t1: bracket[i][0] - 1,\r\n\t\t\t\twinner: undefined,\r\n\t\t\t\tpoll: {\r\n\t\t\t\t\tresult: [0, 0],\r\n\t\t\t\t\tparticipants: [],\r\n\t\t\t\t},\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\treturn matches;\r\n\t}\r\n\r\n\tfunction getBracket(participants) {\r\n\t\tvar participantsCount = participants.length;\r\n\t\tvar rounds = Math.ceil(Math.log(participantsCount) / Math.log(2));\r\n\t\tvar bracketSize = Math.pow(2, rounds);\r\n\t\tvar requiredByes = bracketSize - participantsCount;\r\n\r\n\t\tconsole.log(`Number of participants: ${participantsCount}`);\r\n\t\tconsole.log(`Number of rounds: ${rounds}`);\r\n\t\tconsole.log(`Bracket size: ${bracketSize}`);\r\n\t\tconsole.log(`Required number of byes: ${requiredByes}`);\r\n\r\n\t\tif (participantsCount < 2) {\r\n\t\t\treturn [];\r\n\t\t}\r\n\r\n\t\tvar matches = [[1, 2]];\r\n\r\n\t\tfor (var round = 1; round < rounds; round++) {\r\n\t\t\tvar roundMatches = [];\r\n\t\t\tvar sum = Math.pow(2, round + 1) + 1;\r\n\r\n\t\t\tfor (var i = 0; i < matches.length; i++) {\r\n\t\t\t\tvar home = changeIntoBye(matches[i][0], participantsCount);\r\n\t\t\t\tvar away = changeIntoBye(\r\n\t\t\t\t\tsum - matches[i][0],\r\n\t\t\t\t\tparticipantsCount\r\n\t\t\t\t);\r\n\t\t\t\troundMatches.push([home, away]);\r\n\t\t\t\thome = changeIntoBye(sum - matches[i][1], participantsCount);\r\n\t\t\t\taway = changeIntoBye(matches[i][1], participantsCount);\r\n\t\t\t\troundMatches.push([home, away]);\r\n\t\t\t}\r\n\t\t\tmatches = roundMatches;\r\n\t\t}\r\n\t\treturn matches;\r\n\t}\r\n\r\n\tfunction changeIntoBye(seed, participantsCount) {\r\n\t\t//return seed <= participantsCount ?  seed : '{0} (= bye)'.format(seed);\r\n\t\treturn seed <= participantsCount ? seed : null;\r\n\t}\r\n</script>\r\n\r\n<main>\r\n\t<bracketTitle> Who is the best Youtuber?</bracketTitle>\r\n\t<bracketDescription\r\n\t\t>Type <span class=\"channel1\">\"1\"</span> or\r\n\t\t<span class=\"channel2\">\"2\"</span> in chat, to vote for the current matchup.</bracketDescription\r\n\t>\r\n\t<buttonSection>\r\n\t\t<resetButton\r\n\t\t\tclass=\"interactive\"\r\n\t\t\ton:click={() => controller.setUpBracket()}\r\n\t\t>\r\n\t\t\t↺\r\n\t\t</resetButton>\r\n\t</buttonSection>\r\n\r\n\t<FocusedMatch\r\n\t\tbind:controller\r\n\t\tmatchID={focusedMatch}\r\n\t\t{channels}\r\n\t\tbind:matches\r\n\t/>\r\n\t{#if matches}\r\n\t\t<Bracket\r\n\t\t\tbind:controller\r\n\t\t\tfinal\r\n\t\t\tlevel={bracketLevels - 1}\r\n\t\t\t{channels}\r\n\t\t\tbind:matches\r\n\t\t/>\r\n\t{:else}\r\n\t\tLoading...\r\n\t{/if}\r\n\t<DataInput bind:channels bind:controller />\r\n</main>\r\n\r\n<style>\r\n\t@font-face {\r\n\t\tfont-family: Anton;\r\n\t\tsrc: url(\"../Anton-Regular.ttf\");\r\n\t\tfont-weight: bold;\r\n\t}\r\n\t:global(body) {\r\n\t\tbackground-color: #18181b;\r\n\t\tfont-family: Anton;\r\n\t\tuser-select: none;\r\n\r\n\t\t--color-highlight: #ff9539;\r\n\t\t--color-grey-dark: #18181b;\r\n\t\t--color-grey-medium: #28282e;\r\n\t\t--color-grey-medium-trans: #28282e20;\r\n\t\t--color-grey-light: rgb(76, 76, 83);\r\n\t\t--color-orange: #f69b6c;\r\n\t\t--color-blue: #70cedf;\r\n\t\t--color-cream: #f5edda;\r\n\t}\r\n\t:global(.channel1) {\r\n\t\tcolor: var(--color-orange);\r\n\t}\r\n\t:global(.channel2) {\r\n\t\tcolor: var(--color-blue);\r\n\t}\r\n\r\n\t:global(.interactive) {\r\n\t\tcursor: pointer;\r\n\t}\r\n\r\n\t:global(::-webkit-scrollbar) {\r\n\t\twidth: 0.5rem;\r\n\t\theight: 0.5rem;\r\n\t}\r\n\r\n\t:global(::-webkit-scrollbar-track) {\r\n\t\tbackground: var(--color-grey-dark);\r\n\t}\r\n\r\n\t:global(::-webkit-scrollbar-thumb) {\r\n\t\tbackground: var(--color-grey-light);\r\n\t\tborder-radius: 0.3rem;\r\n\t}\r\n\r\n\t:global(::-webkit-scrollbar-thumb:hover) {\r\n\t\tbackground: var(--color-grey-light);\r\n\t}\r\n\r\n\t:global(::-webkit-scrollbar-corner) {\r\n\t\tbackground: transparent;\r\n\t\twidth: 0.5rem;\r\n\t\theight: 0.5rem;\r\n\t}\r\n\r\n\t:global(::-webkit-resizer) {\r\n\t\tbackground: var(--color-grey-light);\r\n\t\twidth: 0.5rem;\r\n\t\theight: 0.5rem;\r\n\t}\r\n\r\n\tmain {\r\n\t\tmargin: 0 auto;\r\n\t\twidth: fit-content;\r\n\t\theight: fit-content;\r\n\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t}\r\n\r\n\tbracketTitle {\r\n\t\tfont-size: 4rem;\r\n\t\tcolor: var(--color-cream);\r\n\t\t-webkit-text-stroke: 0.15rem black;\r\n\t\ttext-align: center;\r\n\t\tmargin: 2rem 0 0.5rem 0;\r\n\t}\r\n\r\n\tbracketDescription {\r\n\t\tfont-size: 1.5rem;\r\n\t\tcolor: white;\r\n\t\ttext-align: center;\r\n\t\tmargin: 0.25rem 0 1rem 0;\r\n\t}\r\n\r\n\tbuttonSection {\r\n\t\ttext-align: right;\r\n\t\tmargin: 0 2rem 0 0;\r\n\t}\r\n\r\n\tresetButton {\r\n\t\tdisplay: inline-block;\r\n\t\twidth: 3rem;\r\n\t\theight: 3rem;\r\n\t\tfont-size: 1.9rem;\r\n\t\ttext-align: center;\r\n\t\tvertical-align: middle;\r\n\t\tcolor: white;\r\n\t\tbackground-color: var(--color-grey-medium);\r\n\t\tborder-radius: 0.3rem;\r\n\t}\r\n</style>\r\n","import App from './App.svelte';\n\nconst app = new App({\n\ttarget: document.body,\n\tprops: {\n\t}\n});\n\nexport default app;"],"names":["noop","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","src_url_equal_anchor","current_component","src_url_equal","element_src","url","document","createElement","href","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","destroy_each","iterations","detaching","i","length","d","element","name","text","data","createTextNode","space","empty","listen","event","handler","options","addEventListener","removeEventListener","attr","attribute","value","removeAttribute","getAttribute","setAttribute","set_data","wholeText","set_input_value","input","set_style","key","important","style","removeProperty","setProperty","toggle_class","toggle","classList","set_current_component","component","onMount","Error","get_current_component","$$","on_mount","push","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","add_flush_callback","seen_callbacks","Set","flushidx","flush","saved_component","update","pop","callback","has","add","clear","fragment","before_update","dirty","p","ctx","after_update","outroing","outros","group_outros","r","c","check_outros","transition_in","block","local","delete","transition_out","o","bind","index","props","undefined","bound","create_component","mount_component","customElement","on_destroy","m","new_on_destroy","map","filter","destroy_component","make_dirty","then","fill","init","instance","create_fragment","not_equal","append_styles","parent_component","on_disconnect","context","Map","callbacks","skip_bound","root","ready","ret","rest","hydrate","nodes","Array","from","childNodes","children","l","intro","SvelteComponent","$destroy","this","$on","type","indexOf","splice","$set","$$props","obj","$$set","keys","t1_value","img","img_alt_value","src","img_src_value","channel_1","t1","img0","img0_alt_value","img0_src_value","a_href_value","img1","create_if_block","channel","winner","eliminated","controller","channels","matchID","matches","selector","focused","$$invalidate","reset","isFirstChild","parent","t6_value","t10_value","resultBar","Number","isNaN","pollFrame","voteCommands","results","votes0","span1","votes1","pollBar","pollButtons","pollButton0","pollStatus_1","pollButton1","t6","t10","ratio","twitch","lastChannel","pollStatus","endPoll","lastMatchID","twitchChannel","console","log","disconnect","window","tmi","Client","toLowerCase","connect","on","tags","message","self","includes","connectTwitch","nav0","nav1","match","focusMatch","finalMatch","finalChannel0","verticalLine0","verticalLine1","finalChannel1","verticalLine2","verticalLine3","create_if_block_3","channels_1","bracketLine","create_if_block_1","lines","orientation","leaf","current","level","leftbracket","final_1","rightbracket","bracket0_changes","bracket1_changes","previous","bracket","final","each_value","entries","dataLabel0","section0","formBlock0","channelButton","jsonBlock0","textarea0","dataLabel1","section1","formBlock1","jsonBlock1","textarea1","dataLabel2","section2","jsonBlock2","textarea2","input0","input1","t0_value","input_value_value","setting","settingLabel","t0","toggleButton","dataInput","jsonString","settingsJsonString","textarea","settingsTextarea","templateURL","expanded","importJSON","area","JSON","parse","removeChannel","oldChannels","slice","Math","ceil","log2","setUpBracket","cs","location","protocol","host","pathname","encodeURIComponent","getTemplateURL","stringify","vidID","e","innerHTML","$$value","bracket_changes","main","bracketTitle","bracketDescription","buttonSection","resetButton","changeIntoBye","seed","participantsCount","getTBDMatch","structuredClone","poll","result","participants","bracketLevels","focusedMatch","async","queryString","search","urlParams","URLSearchParams","urlChannels","urlChannelNames","get","split","urlChannelIds","fetch","res","json","storageMatches","localStorage","getItem","settings","userConfirm","confirm","id","min","max","skipConfirm","rounds","bracketSize","pow","requiredByes","round","roundMatches","sum","home","away","getBracket","v","k","calculateMatches","setItem","body"],"mappings":"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"}